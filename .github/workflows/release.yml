name: Create Release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    permissions: write-all
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            go_os: linux
            rust_target: x86_64-unknown-linux-gnu
          - os: macos-latest
            go_os: darwin
            rust_target: x86_64-apple-darwin
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23.6"

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.rust_target }}

      - name: Build CLI
        run: |
          # The runner OS is already set to the target system,
          # so no need to set GOOS explicitly.
          make build

      - name: Rename binary to include platform
        run: |
          mv bin/callgraph-cli bin/callgraph-cli-${{ matrix.go_os }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: callgraph-cli-${{ matrix.go_os }}
          path: bin/callgraph-cli-${{ matrix.go_os }}

  release:
    permissions: write-all
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Linux binary artifact
        uses: actions/download-artifact@v4
        with:
          name: callgraph-cli-linux
          path: ./bin/linux

      - name: Download macOS binary artifact
        uses: actions/download-artifact@v4
        with:
          name: callgraph-cli-darwin
          path: ./bin/darwin

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Linux binary to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/linux/callgraph-cli-linux
          asset_name: callgraph-cli-linux
          asset_content_type: application/octet-stream

      - name: Upload macOS binary to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/darwin/callgraph-cli-darwin
          asset_name: callgraph-cli-darwin
          asset_content_type: application/octet-stream
